Index: index.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?php\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/index.php b/index.php
--- a/index.php	(revision 6537c185b0f2f373cb5c46130a110f5b9ee57b20)
+++ b/index.php	(date 1613576087158)
@@ -1,1 +1,49 @@
 <?php
+//require_once ('libraries/autoload.php');
+//require_once 'libraries/models/Produits.php';
+
+
+if (isset($_POST["submit"])) {
+    $id  = $_POST["id"];
+    $nom = $_POST["product_name"];
+    $description = $_POST["product_description"];
+    $other = $_POST["other_product_details"];
+
+    $pdo = new PDO('mysql:host=localhost;dbname=boutique;charset=utf8', 'root', '', [
+        PDO::ATTR_ERRMODE => PDO::ERRMODE_EXCEPTION,
+        PDO::ATTR_DEFAULT_FETCH_MODE => PDO::FETCH_ASSOC
+    ]);
+
+    $sql = "INSERT INTO `products` (`product_id`, `product_type_id`, `product_name`, `product_description`, `other_product_details`) VALUES (:product_id, (SELECT product_type_id from ref_product_types where product_type_id = 1), :product_name, :product_description, :other_product_details)";
+    $query = $pdo->prepare($sql);
+    var_dump($query);
+    $query->execute(['product_id'=> $id,
+        'product_name' => $nom,
+        'product_description' => $description,
+        'other_product_details' => $other]);
+}
+
+//$product = new Produit();
+$value = ;
+//$product->insert($value);
+
+?>
+<form action="" method="post">
+    <input type="number" name="id" value="1"> <br>
+    <input type="text" name="product_name" placeholder="Nom du produit"><br>
+    <input type="text" name="product_description" placeholder="Description"><br>
+    <input type="text" name="other_product_details" placeholder="something to add ?"><br>
+    <button name="submit">Valider !</button>
+</form>
+
+<!--
+<form action="" method="POST">
+    <?php /**
+    foreach ($columnNames as $columnName)
+    {
+        echo '<label for="' . $columnName . '">Enter your ' . $columnName . '</label>
+            <input type="text" name="' . $columnName . '"><br>';
+    }
+    */?>
+    <button>Insérer !</button>
+</form>-->
\ No newline at end of file
Index: libraries/models/Model.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?php\r\n\r\nnamespace Models;\r\n\r\nclass Model\r\n{\r\n    protected $pdo;\r\n    protected $table;\r\n\r\n    /**\r\n     * Model constructor.\r\n     */\r\n    public function __construct()\r\n    {\r\n        $this->pdo = \\Database::getPdo();\r\n    }\r\n\r\n    /**\r\n     * Return une liste de plusieurs produits/user...\r\n     * @param string|string|null $order\r\n     * @return array\r\n     */\r\n    public function findAll(?string $order = \"\") : array\r\n    {\r\n        $sql = \"SELECT * FROM {$this->table}\";\r\n\r\n        if ($order) {\r\n            $sql .= \" ORDER BY \" . $order;\r\n        }\r\n\r\n        $resultats = $this->pdo->query($sql);\r\n        // On fouille le résultat pour en extraire les données réelles\r\n        $articles = $resultats->fetchAll();\r\n\r\n        return $articles;\r\n    }\r\n\r\n    /**\r\n     * Retourne un produit / user ...\r\n     * @param int $id\r\n     * @return mixed\r\n     */\r\n    public function find(int $id)\r\n    {\r\n        $query = $this->pdo->prepare(\"SELECT * FROM {$this->table} WHERE id = :id\");\r\n        $query->execute(['id' => $id]);\r\n        $item = $query->fetch();\r\n        return $item;\r\n    }\r\n\r\n\r\n    /**\r\n     * Supprime un produit / user\r\n     * @param int $id\r\n     */\r\n    public function delete(int $id): void\r\n    {\r\n        $query = $this->pdo->prepare(\"DELETE FROM {$this->table} WHERE id = :id\");\r\n        $query->execute(['id' => $id]);\r\n    }\r\n\r\n    /**\r\n     * Insert un produit /user ...\r\n     * $database->insert( \"table\" , 'username,password,email' , \" 'shaz3e' , 'securepassword', 'email@email.com' \");\r\n     * @param $table\r\n     * @param $column\r\n     * @param $value\r\n     * @return false|\\PDOStatement\r\n     */\r\n    public function insert($table, $column, $value){\r\n        $sql = \"INSERT INTO {$table} ({$column}) VALUES ({$value})\";\r\n        $query = $this->pdo->prepare($sql);\r\n        $query->execute();\r\n        return $query;\r\n    }\r\n\r\n    /**\r\n     * @param $table\r\n     * @param $column\r\n     * @param $value\r\n     * @param $id\r\n     * @return false|\\PDOStatement\r\n     */\r\n    public function update($table, $column, $value, $id){\r\n        $sql = \" UPDATE {$table} SET `{$column}` = {$value} WHERE id = :id\";\r\n        $query = $this->pdo->prepare($sql);\r\n        $query->execute(['id' => $id]);\r\n        return $query;\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/libraries/models/Model.php b/libraries/models/Model.php
--- a/libraries/models/Model.php	(revision 6537c185b0f2f373cb5c46130a110f5b9ee57b20)
+++ b/libraries/models/Model.php	(date 1613568083217)
@@ -1,7 +1,5 @@
 <?php
 
-namespace Models;
-
 class Model
 {
     protected $pdo;
@@ -67,22 +65,26 @@
      * @param $value
      * @return false|\PDOStatement
      */
-    public function insert($table, $column, $value){
+    public function insert($table, $column, $value)
+    {
         $sql = "INSERT INTO {$table} ({$column}) VALUES ({$value})";
         $query = $this->pdo->prepare($sql);
-        $query->execute();
+        $query->execute(compact('table', 'column', 'value'));
         return $query;
     }
 
     /**
+     *  Modifie un produit / user ...
+     *
      * @param $table
      * @param $column
      * @param $value
      * @param $id
      * @return false|\PDOStatement
      */
-    public function update($table, $column, $value, $id){
-        $sql = " UPDATE {$table} SET `{$column}` = {$value} WHERE id = :id";
+    public function update($table, $column, $value, $id)
+    {
+        $sql = "UPDATE {$table} SET `{$column}` = {$value} WHERE id = :id";
         $query = $this->pdo->prepare($sql);
         $query->execute(['id' => $id]);
         return $query;
Index: libraries/models/Produits.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?php\r\nrequire_once 'libraries/Database.php';\r\n\r\nclass Produits\r\n{\r\n    protected $pdo;\r\n    protected $table;\r\n\r\n    public function __construct()\r\n    {\r\n        $this->pdo = getPdo();\r\n    }\r\n\r\n    public function findAll(?string $order = \"\") : array\r\n    {\r\n        $sql = \"SELECT * FROM {$this->table}\";\r\n\r\n        if ($order) {\r\n            $sql .= \" ORDER BY \" . $order;\r\n        }\r\n\r\n        $resultats = $this->pdo->query($sql);\r\n        // On fouille le résultat pour en extraire les données réelles\r\n        $produits = $resultats->fetchAll();\r\n\r\n        return $produits;\r\n    }\r\n\r\n    public function find(int $id)\r\n    {\r\n        $query = $this->pdo->prepare(\"SELECT * FROM {$this->table} WHERE id = :id\");\r\n        $query->execute(['id' => $id]);\r\n        $produit = $query->fetch();\r\n        return $produit;\r\n    }\r\n\r\n    public function update(int $id)\r\n    {\r\n\r\n    }\r\n\r\n    public function delete(int $id): void\r\n    {\r\n        $query = $this->pdo->prepare(\"DELETE FROM {$this->table} WHERE id = :id\");\r\n        $query->execute(['id' => $id]);\r\n    }\r\n\r\n\r\n\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/libraries/models/Produits.php b/libraries/models/Produits.php
--- a/libraries/models/Produits.php	(revision 6537c185b0f2f373cb5c46130a110f5b9ee57b20)
+++ b/libraries/models/Produits.php	(date 1613566998863)
@@ -1,50 +1,9 @@
 <?php
 require_once 'libraries/Database.php';
+require_once 'libraries/models/Model.php';
 
-class Produits
+class Produits extends Model
 {
     protected $pdo;
-    protected $table;
-
-    public function __construct()
-    {
-        $this->pdo = getPdo();
-    }
-
-    public function findAll(?string $order = "") : array
-    {
-        $sql = "SELECT * FROM {$this->table}";
-
-        if ($order) {
-            $sql .= " ORDER BY " . $order;
-        }
-
-        $resultats = $this->pdo->query($sql);
-        // On fouille le résultat pour en extraire les données réelles
-        $produits = $resultats->fetchAll();
-
-        return $produits;
-    }
-
-    public function find(int $id)
-    {
-        $query = $this->pdo->prepare("SELECT * FROM {$this->table} WHERE id = :id");
-        $query->execute(['id' => $id]);
-        $produit = $query->fetch();
-        return $produit;
-    }
-
-    public function update(int $id)
-    {
-
-    }
-
-    public function delete(int $id): void
-    {
-        $query = $this->pdo->prepare("DELETE FROM {$this->table} WHERE id = :id");
-        $query->execute(['id' => $id]);
-    }
-
-
-
+    protected $table = "products";
 }
\ No newline at end of file
Index: template/admin/index.html.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/template/admin/index.html.php b/template/admin/index.html.php
new file mode 100644
--- /dev/null	(date 1613565885650)
+++ b/template/admin/index.html.php	(date 1613565885650)
@@ -0,0 +1,1 @@
+<?php
Index: template/admin/produits.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/template/admin/produits.php b/template/admin/produits.php
new file mode 100644
--- /dev/null	(date 1613565932148)
+++ b/template/admin/produits.php	(date 1613565932148)
@@ -0,0 +1,1 @@
+hello<?php
Index: libraries/models/User.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/libraries/models/User.php b/libraries/models/User.php
new file mode 100644
--- /dev/null	(date 1613568299203)
+++ b/libraries/models/User.php	(date 1613568299203)
@@ -0,0 +1,8 @@
+<?php
+require_once 'libraries/Database.php';
+require_once 'libraries/models/Model.php';
+
+class User extends Model
+{
+    protected $table = "users";
+}
\ No newline at end of file
